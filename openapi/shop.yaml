openapi: 3.0.1
info:
  title: TestShop
  description: TestShop
  version: 1.0.0
security:
  - api_key: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
         type: integer
         format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        summ:
          type: integer
          format: int64
        items:
          type: array
          format: int64
        payed:
          type: boolean






  securitySchemes:
    app_key:
      type: "apiKey"
      name: "api_key"
      in: "header"

paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
      responses:
        200:
          description:  successsful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      parameters:
        - name: "ItemName"
          in: query
          description: "Item object that needs to be added to store"
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        "405":
          description: "Invalid input"
      security:
        - api_key: []
  /items/upload_image:
    post:
      summary: "upload an image"
      operationId: "uploadFile"

      parameters:
        - name: "additionalMetadata"
          in: query
          description: "Additional data to pass to server"
          required: true
        - name: "file"
          in: query
          description:  "file to upload"
          required: true
      responses: {}
      security:
        - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem

      parameters:
        - name: itemId
          in: path
          description: ID for item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
     responses:
       400:
         description: Invalid ID supplied
         content: {}
       404:
         description: Item not found
         content: {}
     security:
        - api_key: []
  /orders:
    put:
      summary: Create the new order
      operationId: CreateOrder
      parameters:
        - name: orderId
          in: path
          description: Order Id to create
          required: true
          schema:
            $ref: "#/components/schemas/Order"
      responses:
        201:
          description: successful operation
          content: {}
      security:
        - api_key: []


























  
